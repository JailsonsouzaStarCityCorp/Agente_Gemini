"""
Agente de Suporte Offline - Funciona sem API
"""
import json
import logging
import pandas as pd
from typing import Dict, Any, List
from utils import executar_com_seguranca, salvar_resultado

class AgenteSuporteOffline:
    """Agente de suporte que funciona offline"""
    
    def __init__(self):
        self.logger = logging.getLogger('agente.suporte.offline')
        self.base_conhecimento = self.carregar_base_conhecimento()
        self.respostas_predefinidas = self.carregar_respostas_predefinidas()
    
    def carregar_base_conhecimento(self) -> Dict[str, List[str]]:
        """Carrega FAQ e documentos de produto"""
        return {
            "produtos": [
                "Produto A - Solu√ß√£o empresarial completa",
                "Produto B - Ferramenta de an√°lise de dados", 
                "Produto C - Sistema de automa√ß√£o"
            ],
            "faq": [
                "Como fazer um pedido? - Acesse nossa loja online ou entre em contato",
                "Pol√≠tica de devolu√ß√£o - 30 dias para devolu√ß√£o sem custos",
                "Formas de pagamento - Cart√£o, PIX, Boleto banc√°rio",
                "Prazo de entrega - 5 a 10 dias √∫teis",
                "Suporte t√©cnico - Dispon√≠vel 24/7 via chat"
            ],
            "contatos": {
                "telefone": "(11) 99999-9999",
                "email": "suporte@empresa.com",
                "chat": "Dispon√≠vel no site"
            }
        }
    
    def carregar_respostas_predefinidas(self) -> Dict[str, str]:
        """Carrega respostas pr√©-definidas para perguntas comuns"""
        return {
            "pedido": "Para fazer um pedido, voc√™ pode:\n1. Acessar nossa loja online\n2. Entrar em contato pelo telefone (11) 99999-9999\n3. Enviar email para vendas@empresa.com\n\nNossa equipe est√° pronta para te ajudar! üòä",
            
            "entrega": "Nossos prazos de entrega s√£o:\n‚Ä¢ Regi√£o Metropolitana: 2-3 dias √∫teis\n‚Ä¢ Interior: 5-7 dias √∫teis\n‚Ä¢ Outros estados: 7-10 dias √∫teis\n\nVoc√™ pode acompanhar seu pedido pelo c√≥digo de rastreamento! üì¶",
            
            "devolu√ß√£o": "Nossa pol√≠tica de devolu√ß√£o:\n‚Ä¢ Prazo: 30 dias ap√≥s o recebimento\n‚Ä¢ Produto deve estar em perfeito estado\n‚Ä¢ Sem custos para devolu√ß√£o\n‚Ä¢ Reembolso em at√© 5 dias √∫teis\n\nPara iniciar uma devolu√ß√£o, entre em contato conosco! üîÑ",
            
            "pagamento": "Aceitamos as seguintes formas de pagamento:\n‚Ä¢ Cart√£o de cr√©dito (Visa, Mastercard, Elo)\n‚Ä¢ PIX (desconto de 5%)\n‚Ä¢ Boleto banc√°rio\n‚Ä¢ Cart√£o de d√©bito\n\nPagamento seguro e protegido! üí≥",
            
            "suporte": "Nosso suporte est√° dispon√≠vel:\n‚Ä¢ Chat online: 24/7\n‚Ä¢ Telefone: (11) 99999-9999\n‚Ä¢ Email: suporte@empresa.com\n‚Ä¢ WhatsApp: (11) 99999-9999\n\nSempre prontos para te ajudar! üéß",
            
            "produto": "Nossos produtos principais:\n‚Ä¢ Produto A: Solu√ß√£o empresarial completa\n‚Ä¢ Produto B: Ferramenta de an√°lise de dados\n‚Ä¢ Produto C: Sistema de automa√ß√£o\n\nQuer saber mais sobre algum produto espec√≠fico? üòä"
        }
    
    def identificar_tipo_pergunta(self, pergunta: str) -> str:
        """Identifica o tipo de pergunta baseado em palavras-chave"""
        pergunta_lower = pergunta.lower()
        
        if any(palavra in pergunta_lower for palavra in ['pedido', 'comprar', 'adquirir', 'encomendar']):
            return 'pedido'
        elif any(palavra in pergunta_lower for palavra in ['entrega', 'prazo', 'quando chega', 'demora']):
            return 'entrega'
        elif any(palavra in pergunta_lower for palavra in ['devolu√ß√£o', 'devolver', 'trocar', 'reembolso']):
            return 'devolu√ß√£o'
        elif any(palavra in pergunta_lower for palavra in ['pagamento', 'pagar', 'cart√£o', 'pix', 'boleto']):
            return 'pagamento'
        elif any(palavra in pergunta_lower for palavra in ['suporte', 'ajuda', 'problema', 'd√∫vida']):
            return 'suporte'
        elif any(palavra in pergunta_lower for palavra in ['produto', 'servi√ßo', 'o que voc√™s vendem']):
            return 'produto'
        else:
            return 'geral'
    
    def gerar_resposta_offline(self, pergunta: str) -> str:
        """Gera resposta offline baseada em templates"""
        tipo = self.identificar_tipo_pergunta(pergunta)
        
        if tipo in self.respostas_predefinidas:
            resposta = self.respostas_predefinidas[tipo]
        else:
            resposta = f"""Ol√°! üëã 

Obrigado por entrar em contato conosco!

Sua pergunta: "{pergunta}"

Nossa equipe de suporte est√° analisando sua solicita√ß√£o e retornar√° em breve.

Enquanto isso, voc√™ pode:
‚Ä¢ Acessar nosso FAQ: www.empresa.com/faq
‚Ä¢ Entrar em contato: (11) 99999-9999
‚Ä¢ Enviar email: suporte@empresa.com

Atenciosamente,
Equipe de Suporte üéß"""
        
        return resposta
    
    def classificar_urgencia_offline(self, pergunta: str) -> str:
        """Classifica urg√™ncia baseada em palavras-chave"""
        pergunta_lower = pergunta.lower()
        
        # Palavras de alta urg√™ncia
        alta_urgencia = ['urgente', 'emerg√™ncia', 'problema cr√≠tico', 'n√£o funciona', 'erro', 'falha']
        if any(palavra in pergunta_lower for palavra in alta_urgencia):
            return 'ALTA'
        
        # Palavras de baixa urg√™ncia
        baixa_urgencia = ['informa√ß√£o', 'd√∫vida', 'curiosidade', 'pre√ßo', 'cat√°logo']
        if any(palavra in pergunta_lower for palavra in baixa_urgencia):
            return 'BAIXA'
        
        # Padr√£o √© m√©dia urg√™ncia
        return 'M√âDIA'
    
    def processar_solicitacao(self, pergunta: str) -> Dict[str, Any]:
        """Processa solicita√ß√£o completa de suporte"""
        try:
            self.logger.info(f"Processando pergunta: {pergunta[:50]}...")
            
            # Gerar resposta offline
            resposta = self.gerar_resposta_offline(pergunta)
            
            # Classificar urg√™ncia
            urgencia = self.classificar_urgencia_offline(pergunta)
            
            resultado_final = {
                "pergunta": pergunta,
                "resposta": resposta,
                "urgencia": urgencia,
                "timestamp": pd.Timestamp.now().isoformat(),
                "status": "processado",
                "modo": "offline"
            }
            
            # Salvar hist√≥rico
            arquivo_historico = f"reports/suporte_offline_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.json"
            salvar_resultado(resultado_final, arquivo_historico)
            
            self.logger.info("Solicita√ß√£o processada com sucesso (modo offline)")
            return {"sucesso": True, "dados": resultado_final}
            
        except Exception as e:
            self.logger.error(f"Erro no processamento offline: {str(e)}")
            return {"sucesso": False, "erro": str(e)}
